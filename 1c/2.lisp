;;; Google Code Jam 2020, Round 1C, Problem 2: Overrandomized

(defun solve (&optional (in *standard-input*))
  (dotimes (caseno (read in))
    (format t "Case #~D: " (+ caseno 1))
    (solve-case in)))

(defun solve-case (in)
  (labels
      ((i2c (i) (code-char (+ i #.(char-code #\A))))
       (c2i (c) (- (char-code c) #.(char-code #\A))))
    (let ((u (read in))
          (seen 0)
          (d1-counters (make-array (list 26) :initial-element 0)))
      (declare (ignore u))
      (dotimes (i 10000)
        (let ((qi (read in))
              (ri (string-trim '(#\Space #\Tab #\Newline) (read-line in))))
          (declare (ignore qi))
          (incf (aref d1-counters (c2i (char ri 0))))
          (dotimes (k (length ri))
            (setf seen (logior seen (ash 1 (c2i (char ri k))))))))
      (let ((zero (dotimes (i 26 0)
                    (when (and (not (zerop (logand seen (ash 1 i))))
                               (zerop (aref d1-counters i)))
                      (return i)))))
        (write-char (i2c zero))
        (let ((sorted-counters (sort (copy-seq d1-counters) #'>)))
          (dotimes (i 9)
            (write-char (i2c (position (aref sorted-counters i) d1-counters)))))))
    (terpri)))

(solve)
