;;; Google Code Jam 2020, Qualification Round, Problem 1: Vestigium

(defun solve (&optional (in *standard-input*))
  (dotimes (caseno (read in))
    (format t "Case #~D: " (+ caseno 1))
    (solve-case in)))

(defun solve-case (in)
  (let ((N (read in)))
    (let ((M (make-array (list N N))))
      ;; read array
      (dotimes (i N)
        (dotimes (j N)
          (setf (aref M i j) (read in))))
      (let ((trace 0)
            (badrows 0)
            (badcols 0))
        (dotimes (a N)
          (incf trace (aref M a a))
          (let ((row-seen (make-array (list N) :element-type 'bit :initial-element 0))
                (col-seen (make-array (list N) :element-type 'bit :initial-element 0))
                (row-duplicate-p nil)
                (col-duplicate-p nil))
            (dotimes (b N)
              (let ((c1 (aref M a b))
                    (c2 (aref M b a)))
                (if (not (zerop (aref row-seen (1- c1))))
                    (setq row-duplicate-p t)
                    (setf (aref row-seen (1- c1)) 1))
                (if (not (zerop (aref col-seen (1- c2))))
                    (setq col-duplicate-p t)
                    (setf (aref col-seen (1- c2)) 1))))
            (when row-duplicate-p (incf badrows))
            (when col-duplicate-p (incf badcols))))
        (format t "~D ~D ~D~%" trace badrows badcols)))))

(solve)
